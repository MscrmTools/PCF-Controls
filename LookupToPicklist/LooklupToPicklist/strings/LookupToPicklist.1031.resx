<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace"/>
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0"/>
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string"/>
              <xsd:attribute name="type" type="xsd:string"/>
              <xsd:attribute name="mimetype" type="xsd:string"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string"/>
              <xsd:attribute name="name" type="xsd:string"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1"/>
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3"/>
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4"/>
              <xsd:attribute ref="xml:space"/>
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1"/>
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required"/>
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Control_Display_Name_Key" xml:space="preserve">
    <value>Von Lookup zur Dropdown-Liste v9</value>
    <comment/>
  </data>
  <data name="Control_Description_Key" xml:space="preserve">
    <value>Zeigt die Lookup-Spalte als Dropdown-Liste an</value>
    <comment/>
  </data>
  <data name="lookup_Display_Key" xml:space="preserve">
    <value>Lookup-Spalte</value>
    <comment/>
  </data>
  <data name="lookup_Desc_Key" xml:space="preserve">
    <value>Lookup-Spalte, auf die dieses Steuerelement abgebildet ist</value>
    <comment/>
  </data>
  <data name="attributemask_Display_Key" xml:space="preserve">
    <value>Anzeigemaske</value>
    <comment/>
  </data>
  <data name="attributemask_Desc_Key" xml:space="preserve">
    <value>Maske, die angibt, welche Spalte zur Anzeige verwendet wird. Wenn leer, wird der primäre Name der Tabelle verwendet. Verwenden Sie den Code {lcid}, um den Sprachcode der Benutzeroberfläche einzuschließen</value>
    <comment/>
  </data>
  <data name="sortByName_Display_Key" xml:space="preserve">
    <value>Nach Anzeigenamen sortieren</value>
    <comment/>
  </data>
  <data name="sortByName_Desc_Key" xml:space="preserve">
    <value>Gibt an, ob die Sortierung auf dem Anzeigenamen oder der ausgewählten Ansichtsreihenfolge basiert</value>
    <comment/>
  </data>
  <data name="yes_Display_Key" xml:space="preserve">
    <value>Ja</value>
    <comment/>
  </data>
  <data name="yes_Desc_Key" xml:space="preserve">
    <value>Nach Anzeigenamen sortiert</value>
    <comment/>
  </data>
  <data name="no_Display_Key" xml:space="preserve">
    <value>Nein</value>
    <comment/>
  </data>
  <data name="no_Desc_Key" xml:space="preserve">
    <value>Nach ausgewählter Ansichtsreihenfolge sortiert</value>
    <comment/>
  </data>
  <data name="AddNew_Display_Key" xml:space="preserve">
    <value>Neu hinzufügen</value>
    <comment/>
  </data>
  <data name="addNew_Display_Key" xml:space="preserve">
    <value>Ermöglicht das Erstellen von Datensätzen</value>
    <comment/>
  </data>
  <data name="addNew_Desc_Key" xml:space="preserve">
    <value>Ermöglicht dem Benutzer, neue Datensätze aus dem Dropdown-Menü zu erstellen. Erfordert entsprechende Berechtigungen</value>
    <comment/>
  </data>
  <data name="dependantLookup_Display_Key" xml:space="preserve">
    <value>Filternde Spalte</value>
    <comment/>
  </data>
  <data name="dependantLookup_Desc_Key" xml:space="preserve">
    <value>Legen Sie die Lookup-Spalte fest, die verwendet wird, um dieses Steuerelement zu filtern. Muss dieselbe Lookup sein, wie in der Filterkonfiguration dieses Steuerelements definiert</value>
    <comment/>
  </data>
  <data name="addSearch_Display_Key" xml:space="preserve">
    <value>Suchleiste anzeigen</value>
    <comment/>
  </data>
  <data name="recentItems" xml:space="preserve">
    <value>Neueste Elemente</value>
    <comment/>
  </data>
  <data name="searchPlaceHolder" xml:space="preserve">
    <value>Suchen</value>
    <comment/>
  </data>
  <data name="favorites" xml:space="preserve">
    <value>Favoriten</value>
    <comment/>
  </data>
  <data name="favorites_Display_Key" xml:space="preserve">
    <value>Favoriten</value>
    <comment/>
  </data>
  <data name="favorites_Desc_Key" xml:space="preserve">
    <value>Liste eindeutiger Datensatz-Identifikatoren, die als Favoriten angezeigt werden</value>
    <comment/>
  </data>
  <data name="mruSize_Display_Key" xml:space="preserve">
    <value>Anzahl der neuesten Elemente</value>
    <comment/>
  </data>
  <data name="mruSize_Desc_Key" xml:space="preserve">
    <value>Gibt die Anzahl der anzuzeigenden neuesten Elemente an</value>
    <comment/>
  </data>
  <data name="addSearch_Desc_Key" xml:space="preserve">
    <value>Gibt an, ob eine Suchleiste oben im Dropdown-Menü hinzugefügt werden soll</value>
    <comment/>
  </data>
  <data name="dependantLookupTargetColumn_Display_Key" xml:space="preserve">
    <value>Filterzielspalte</value>
    <comment/>
  </data>
  <data name="dependantLookupTargetColumn_Desx_Key" xml:space="preserve">
    <value>Spalte in der Zieltabelle der zu verwendenden Filterspalte. Nur verwenden, wenn der logische Name der Filterspalte sich von der ID-Spalte der Zieltabelle unterscheidet</value>
    <comment/>
  </data>
</root>